{"version":3,"file":"toggle-view.js","sourceRoot":"","sources":["../lib/toggle-view.ts"],"names":[],"mappings":"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","sourcesContent":["import { CompositeDisposable, Emitter, Disposable } from 'atom'\n\n// https://github.com/atom/atom-select-list/pull/31\nlet SelectListView: any\ntype ToggleAction = 'enable' | 'disable'\n\nexport default class ToggleView {\n  private action: ToggleAction\n  private emitter: Emitter = new Emitter()\n  private providers: Array<string>\n  private subscriptions: CompositeDisposable = new CompositeDisposable()\n  private disabledProviders: Array<string> = []\n\n  constructor(action: ToggleAction, providers: Array<string>) {\n    this.action = action\n    this.providers = providers\n\n    this.subscriptions.add(\n      this.emitter,\n      atom.config.observe('linter.disabledProviders', disabledProviders => {\n        this.disabledProviders = disabledProviders\n      }),\n    )\n  }\n  getItems(): Array<string> {\n    if (this.action === 'disable') {\n      return this.providers.filter(name => !this.disabledProviders.includes(name))\n    }\n    return this.disabledProviders\n  }\n  process(name: string): void {\n    if (this.action === 'disable') {\n      this.disabledProviders.push(name)\n      this.emitter.emit('did-disable', name)\n    } else {\n      const index = this.disabledProviders.indexOf(name)\n      if (index !== -1) {\n        this.disabledProviders.splice(index, 1)\n      }\n    }\n    atom.config.set('linter.disabledProviders', this.disabledProviders)\n  }\n  show() {\n    if (!SelectListView) {\n      SelectListView = require('atom-select-list')\n    }\n    const selectListView = new SelectListView({\n      items: this.getItems(),\n      emptyMessage: 'No matches found',\n      elementForItem: (item: any) => {\n        const li = document.createElement('li')\n        li.textContent = item\n        return li\n      },\n      didConfirmSelection: (item: any) => {\n        try {\n          this.process(item)\n          this.dispose()\n        } catch (e) {\n          console.error('[Linter] Unable to process toggle:', e)\n        }\n      },\n      didCancelSelection: () => {\n        this.dispose()\n      },\n      didConfirmEmptySelection: () => {\n        this.dispose()\n      },\n    })\n    const panel = atom.workspace.addModalPanel({ item: selectListView })\n\n    selectListView.focus()\n    this.subscriptions.add(\n      new Disposable(function () {\n        panel.destroy()\n      }),\n    )\n  }\n\n  /* eslint-disable @typescript-eslint/no-explicit-any */\n  onDidDispose(callback: () => any): Disposable {\n    return this.emitter.on('did-dispose', callback)\n  }\n  onDidDisable(callback: (name: string) => any): Disposable {\n    return this.emitter.on('did-disable', callback)\n  }\n  /* eslint-enable @typescript-eslint/no-explicit-any */\n\n  dispose() {\n    this.emitter.emit('did-dispose')\n    this.subscriptions.dispose()\n  }\n}\n"]}