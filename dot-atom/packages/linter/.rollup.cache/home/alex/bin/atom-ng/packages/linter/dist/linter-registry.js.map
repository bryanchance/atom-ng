{"version":3,"file":"linter-registry.js","sourceRoot":"","sources":["../lib/linter-registry.ts"],"names":[],"mappings":"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","sourcesContent":["import { Emitter, CompositeDisposable } from 'atom'\nimport type { TextEditor, Disposable, Notification } from 'atom'\n\nimport * as Helpers from './helpers'\nimport * as Validate from './validate'\nimport { $version, $activated, $requestLatest, $requestLastReceived } from './helpers'\nimport type { Linter } from './types'\n\nexport default class LinterRegistry {\n  private emitter: Emitter = new Emitter()\n  private linters: Set<Linter> = new Set()\n  private lintOnChange: boolean = true\n  private ignoreVCS: boolean = true\n  private ignoreGlob: string = '**/*.min.{js,css}'\n  private lintPreviewTabs: boolean = true\n  private subscriptions: CompositeDisposable = new CompositeDisposable()\n  private disabledProviders: Array<string> = []\n  private activeNotifications: Set<Notification> = new Set()\n\n  constructor() {\n    this.subscriptions.add(\n      this.emitter,\n      atom.config.observe('linter.lintOnChange', lintOnChange => {\n        this.lintOnChange = lintOnChange\n      }),\n      atom.config.observe('core.excludeVcsIgnoredPaths', ignoreVCS => {\n        this.ignoreVCS = ignoreVCS\n      }),\n      atom.config.observe('linter.ignoreGlob', ignoreGlob => {\n        this.ignoreGlob = ignoreGlob\n      }),\n      atom.config.observe('linter.lintPreviewTabs', lintPreviewTabs => {\n        this.lintPreviewTabs = lintPreviewTabs\n      }),\n      atom.config.observe('linter.disabledProviders', disabledProviders => {\n        if (disabledProviders.length !== 0) {\n          console.warn(`Linter package: disabled linter providers: ${disabledProviders}`)\n        }\n        this.disabledProviders = disabledProviders\n      }),\n    )\n  }\n  hasLinter(linter: Linter): boolean {\n    return this.linters.has(linter)\n  }\n  addLinter(linter: Linter) {\n    if (!Validate.linter(linter)) {\n      return\n    }\n    linter[$activated] = true\n    if (typeof linter[$requestLatest] === 'undefined') {\n      linter[$requestLatest] = 0\n    }\n    if (typeof linter[$requestLastReceived] === 'undefined') {\n      linter[$requestLastReceived] = 0\n    }\n    linter[$version] = 2\n    this.linters.add(linter)\n  }\n  getProviders(): Array<Linter> {\n    return Array.from(this.linters)\n  }\n  deleteLinter(linter: Linter) {\n    if (!this.linters.has(linter)) {\n      return\n    }\n    linter[$activated] = false\n    this.linters.delete(linter)\n  }\n  async lint({ onChange, editor }: { onChange: boolean; editor: TextEditor }): Promise<boolean> {\n    const filePath = editor.getPath()\n\n    if (\n      (onChange && !this.lintOnChange) || // Lint-on-change mismatch\n      // Ignored by VCS, Glob, or simply not saved anywhere yet\n      (!this.lintPreviewTabs && atom.workspace.getActivePane().getPendingItem() === editor) || // Ignore Preview tabs\n      (await Helpers.isPathIgnored(editor.getPath(), this.ignoreGlob, this.ignoreVCS))\n    ) {\n      return false\n    }\n\n    const scopes = Helpers.getEditorCursorScopes(editor)\n\n    const promises = []\n    for (const linter of this.linters) {\n      if (!Helpers.shouldTriggerLinter(linter, onChange, scopes)) {\n        continue\n      }\n      if (this.disabledProviders.includes(linter.name)) {\n        continue\n      }\n      const number = ++linter[$requestLatest]\n      const statusBuffer = linter.scope === 'file' ? editor.getBuffer() : null\n      const statusFilePath = linter.scope === 'file' ? filePath : null\n\n      this.emitter.emit('did-begin-linting', { number, linter, filePath: statusFilePath })\n      promises.push(\n        new Promise(function (resolve: (editor: ReturnType<Linter['lint']>) => void) {\n          resolve(linter.lint(editor))\n        }).then(\n          messages => {\n            this.emitter.emit('did-finish-linting', { number, linter, filePath: statusFilePath })\n            if (linter[$requestLastReceived] >= number || !linter[$activated] || (statusBuffer && !statusBuffer.isAlive())) {\n              return\n            }\n            linter[$requestLastReceived] = number\n            if (statusBuffer && !statusBuffer.isAlive()) {\n              return\n            }\n\n            if (messages === null || messages === undefined) {\n              // NOTE: Do NOT update the messages when providers return null\n              return\n            }\n\n            let validity = true\n            // NOTE: We are calling it when results are not an array to show a nice notification\n            if (atom.inDevMode() || !Array.isArray(messages)) {\n              validity = Validate.messages(linter.name, messages)\n            }\n            if (!validity) {\n              return\n            }\n\n            Helpers.normalizeMessages(linter.name, messages)\n            this.emitter.emit('did-update-messages', { messages, linter, buffer: statusBuffer })\n          },\n          error => {\n            this.emitter.emit('did-finish-linting', { number, linter, filePath: statusFilePath })\n\n            console.error(`[Linter] Error running ${linter.name}`, error)\n            const notificationMessage = `[Linter] Error running ${linter.name}`\n            if (Array.from(this.activeNotifications).some(item => item.getOptions().detail === notificationMessage)) {\n              // This message is still showing to the user!\n              return\n            }\n\n            const notification = atom.notifications.addError(notificationMessage, {\n              detail: 'See Console for more info.',\n              dismissable: true,\n              buttons: [\n                {\n                  text: 'Open Console',\n                  onDidClick: () => {\n                    atom.openDevTools()\n                    notification.dismiss()\n                  },\n                },\n                {\n                  text: 'Cancel',\n                  onDidClick: () => {\n                    notification.dismiss()\n                  },\n                },\n              ],\n            })\n          },\n        ),\n      )\n    }\n\n    await Promise.all(promises)\n    return true\n  }\n\n  /* eslint-disable @typescript-eslint/no-explicit-any */\n  onDidUpdateMessages(callback: (...args: Array<any>) => any): Disposable {\n    return this.emitter.on('did-update-messages', callback)\n  }\n  onDidBeginLinting(callback: (...args: Array<any>) => any): Disposable {\n    return this.emitter.on('did-begin-linting', callback)\n  }\n  onDidFinishLinting(callback: (...args: Array<any>) => any): Disposable {\n    return this.emitter.on('did-finish-linting', callback)\n  }\n  /* eslint-enable @typescript-eslint/no-explicit-any */\n\n  dispose() {\n    this.activeNotifications.forEach(notification => notification.dismiss())\n    this.activeNotifications.clear()\n    this.linters.clear()\n    this.subscriptions.dispose()\n  }\n}\n"]}