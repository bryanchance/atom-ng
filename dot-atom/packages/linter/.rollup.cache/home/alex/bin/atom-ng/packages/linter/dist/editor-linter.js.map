{"version":3,"file":"editor-linter.js","sourceRoot":"","sources":["../lib/editor-linter.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,OAAO,EAAE,mBAAmB,EAAE,UAAU,EAAE,MAAM,MAAM,CAAA;AAC/D,OAAO,QAAQ,MAAM,iBAAiB,CAAA;AAGtC,MAAM,CAAC,OAAO,OAAO,YAAY;IAK/B,YAAY,MAAkB;QAHtB,YAAO,GAAY,IAAI,OAAO,EAAE,CAAA;QAChC,kBAAa,GAAwB,IAAI,mBAAmB,EAAE,CAAA;QAGpE,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,MAAM,CAAC,EAAE;YACxC,MAAM,IAAI,KAAK,CAAC,yCAAyC,CAAC,CAAA;SAC3D;QACD,MAAM,YAAY,GAAG,MAAM,CAAC,SAAS,EAAE,CAAA;QACvC,MAAM,aAAa,GAAG,QAAQ,CAC5B,GAAG,EAAE;YACH,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,aAAa,EAAE,KAAK,CAAC,CAAA;QACzC,CAAC,EACD,EAAE,EACF,EAAE,OAAO,EAAE,IAAI,EAAE,CAClB,CAAA;QAED,IAAI,CAAC,MAAM,GAAG,MAAM,CAAA;QAEpB,IAAI,CAAC,aAAa,CAAC,GAAG,CACpB,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,EAI9C,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,aAAa,CAAC,EAGpC,YAAY,CAAC,WAAW,CAAC,aAAa,CAAC,EAIvC,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,MAAM,EAAE,6BAA6B,EAAE,QAAQ,CAAC,EAAE,CAC9E,YAAY,CAAC,WAAW,CACtB,QAAQ,CAAC,GAAG,EAAE;YACZ,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,aAAa,EAAE,IAAI,CAAC,CAAA;QACxC,CAAC,EAAE,QAAQ,CAAC,CACb,CACF,CACF,CAAA;IACH,CAAC;IACD,SAAS;QACP,OAAO,IAAI,CAAC,MAAM,CAAA;IACpB,CAAC;IACD,IAAI,CAAC,WAAoB,KAAK;QAC5B,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,aAAa,EAAE,QAAQ,CAAC,CAAA;IAC5C,CAAC;IAGD,YAAY,CAAC,QAAsC;QACjD,OAAO,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,aAAa,EAAE,QAAQ,CAAC,CAAA;IACjD,CAAC;IACD,YAAY,CAAC,QAAsC;QACjD,OAAO,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,aAAa,EAAE,QAAQ,CAAC,CAAA;IACjD,CAAC;IAGD,OAAO;QACL,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,aAAa,CAAC,CAAA;QAChC,IAAI,CAAC,aAAa,CAAC,OAAO,EAAE,CAAA;QAC5B,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,CAAA;IACxB,CAAC;IAED,mBAAmB,CAAC,MAA2B,EAAE,SAAiB,EAAE,QAAsC;QACxG,IAAI,YAAY,GAAsB,IAAI,CAAA;QAC1C,MAAM,iBAAiB,GAAG,MAAM,CAAC,OAAO,CAAC,SAAS,EAAE,CAAC,KAA0B,EAAE,EAAE;YACjF,IAAI,YAAY,EAAE;gBAChB,YAAY,CAAC,OAAO,EAAE,CAAA;aACvB;YACD,YAAY,GAAG,QAAQ,CAAC,IAAI,CAAC,IAAI,EAAE,KAAK,CAAC,CAAA;QAC3C,CAAC,CAAC,CAAA;QAEF,OAAO,IAAI,UAAU,CAAC;YACpB,iBAAiB,CAAC,OAAO,EAAE,CAAA;YAC3B,IAAI,YAAY,EAAE;gBAChB,YAAY,CAAC,OAAO,EAAE,CAAA;aACvB;QACH,CAAC,CAAC,CAAA;IACJ,CAAC;CACF","sourcesContent":["import { Emitter, CompositeDisposable, Disposable } from 'atom'\nimport debounce from 'lodash/debounce'\nimport type { TextEditor } from 'atom'\n\nexport default class EditorLinter {\n  private editor: TextEditor\n  private emitter: Emitter = new Emitter()\n  private subscriptions: CompositeDisposable = new CompositeDisposable()\n\n  constructor(editor: TextEditor) {\n    if (!atom.workspace.isTextEditor(editor)) {\n      throw new Error('EditorLinter expects a valid TextEditor')\n    }\n    const editorBuffer = editor.getBuffer()\n    const debouncedLint = debounce(\n      () => {\n        this.emitter.emit('should-lint', false)\n      },\n      50,\n      { leading: true },\n    )\n\n    this.editor = editor\n\n    this.subscriptions.add(\n      this.editor.onDidDestroy(() => this.dispose()),\n\n      // This debouncing is for beautifiers, if they change contents of the editor and save\n      // Linter should count that group of events as one.\n      this.editor.onDidSave(debouncedLint),\n\n      // This is to relint in case of external changes to the opened file\n      editorBuffer.onDidReload(debouncedLint),\n\n      // NOTE: TextEditor::onDidChange immediately invokes the callback if the text editor was *just* created\n      // Using TextBuffer::onDidChange doesn't have the same behavior so using it instead.\n      this.subscriptiveObserve(atom.config, 'linter.lintOnChangeInterval', interval =>\n        editorBuffer.onDidChange(\n          debounce(() => {\n            this.emitter.emit('should-lint', true)\n          }, interval),\n        ),\n      ),\n    )\n  }\n  getEditor(): TextEditor {\n    return this.editor\n  }\n  lint(onChange: boolean = false) {\n    this.emitter.emit('should-lint', onChange)\n  }\n\n  /* eslint-disable @typescript-eslint/no-explicit-any */\n  onShouldLint(callback: (...args: Array<any>) => any): Disposable {\n    return this.emitter.on('should-lint', callback)\n  }\n  onDidDestroy(callback: (...args: Array<any>) => any): Disposable {\n    return this.emitter.on('did-destroy', callback)\n  }\n  /* eslint-disable @typescript-eslint/no-explicit-any */\n\n  dispose() {\n    this.emitter.emit('did-destroy')\n    this.subscriptions.dispose()\n    this.emitter.dispose()\n  }\n\n  subscriptiveObserve(object: Record<string, any>, eventName: string, callback: (...args: Array<any>) => any): Disposable {\n    let subscription: Disposable | null = null\n    const eventSubscription = object.observe(eventName, (props: Record<string, any>) => {\n      if (subscription) {\n        subscription.dispose()\n      }\n      subscription = callback.call(this, props)\n    })\n\n    return new Disposable(function () {\n      eventSubscription.dispose()\n      if (subscription) {\n        subscription.dispose()\n      }\n    })\n  }\n}\n"]}