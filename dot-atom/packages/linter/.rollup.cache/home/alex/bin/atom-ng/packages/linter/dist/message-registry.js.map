{"version":3,"file":"message-registry.js","sourceRoot":"","sources":["../lib/message-registry.ts"],"names":[],"mappings":"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","sourcesContent":["import { CompositeDisposable, Emitter } from 'atom'\nimport debounce from 'lodash/debounce'\nimport type { Disposable, TextBuffer } from 'atom'\nimport { flagMessages, mergeArray } from './helpers'\nimport type { MessagesPatch, Message, Linter } from './types'\n\ntype Linter$Message$Map = {\n  buffer: TextBuffer | null | undefined\n  linter: Linter\n  changed: boolean\n  deleted: boolean\n  messages: Array<Message>\n  oldMessages: Array<Message>\n}\n\nexport default class MessageRegistry {\n  private emitter: Emitter = new Emitter()\n  messages: Array<Message> = []\n  private messagesMap: Set<Linter$Message$Map> = new Set()\n  private subscriptions: CompositeDisposable = new CompositeDisposable()\n  private debouncedUpdate: () => void\n\n  constructor() {\n    this.debouncedUpdate = debounce(this.update, 100, { leading: true })\n    this.subscriptions.add(this.emitter)\n  }\n  set({ messages, linter, buffer }: { messages: Array<Message>; linter: Linter; buffer: TextBuffer | null }) {\n    // check if the linter has been already set\n    let found = null\n    for (const entry of this.messagesMap) {\n      if (entry.buffer === buffer && entry.linter === linter) {\n        found = entry\n        break\n      }\n    }\n\n    if (found) {\n      // found linter\n      found.messages = messages\n      found.changed = true\n    } else {\n      // new linter\n      this.messagesMap.add({ messages, linter, buffer, oldMessages: [], changed: true, deleted: false })\n    }\n    this.debouncedUpdate()\n  }\n  update() {\n    // the final object sent to UI that contains the messages tagged for adding/removeal. messages is all the kept + added messages\n    const result: { added: Array<Message>; removed: Array<Message>; messages: Array<Message> } = {\n      added: [],\n      removed: [],\n      messages: [],\n    }\n\n    // looping over each linter\n    for (const entry of this.messagesMap) {\n      // if linter is deleted\n      // tag the linter's cache for removal and delete it from the map\n      if (entry.deleted) {\n        mergeArray(result.removed, entry.oldMessages)\n        this.messagesMap.delete(entry)\n        continue\n      }\n\n      // if the linter is not changed\n      // just use its cache (no added/removed and everything is kept) and skip the rest\n      if (!entry.changed) {\n        // TODO When this code acutally runs?!\n        mergeArray(result.messages, entry.oldMessages)\n        continue\n      }\n\n      // flag messages as oldKept, oldRemoved, newAdded\n      const flaggedMessages = flagMessages(entry.messages, entry.oldMessages)\n\n      // update the result and cache\n      if (flaggedMessages !== null) {\n        const { oldKept, oldRemoved, newAdded } = flaggedMessages\n        mergeArray(result.added, newAdded)\n        mergeArray(result.removed, oldRemoved)\n        const allThisEntry = newAdded.concat(oldKept)\n        mergeArray(result.messages, allThisEntry)\n        entry.oldMessages = allThisEntry // update chache\n      }\n    }\n\n    // if any messages is removed or added, then update the UI\n    if (result.added.length || result.removed.length) {\n      this.messages = result.messages\n      this.emitter.emit('did-update-messages', result)\n    }\n  }\n  onDidUpdateMessages(callback: (difference: MessagesPatch) => void): Disposable {\n    return this.emitter.on('did-update-messages', callback)\n  }\n  deleteByBuffer(buffer: TextBuffer) {\n    for (const entry of this.messagesMap) {\n      if (entry.buffer === buffer) {\n        entry.deleted = true\n      }\n    }\n    this.debouncedUpdate()\n  }\n  deleteByLinter(linter: Linter) {\n    for (const entry of this.messagesMap) {\n      if (entry.linter === linter) {\n        entry.deleted = true\n      }\n    }\n    this.debouncedUpdate()\n  }\n  dispose() {\n    this.subscriptions.dispose()\n  }\n}\n"]}