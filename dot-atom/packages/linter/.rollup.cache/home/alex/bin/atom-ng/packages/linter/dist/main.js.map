{"version":3,"file":"main.js","sourceRoot":"","sources":["../lib/main.ts"],"names":[],"mappings":"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","sourcesContent":["import arrayUnique from 'lodash/uniq'\nimport { CompositeDisposable } from 'atom'\n\nimport UIRegistry from './ui-registry'\nimport IndieRegistry from './indie-registry'\nimport MessageRegistry from './message-registry'\nimport LinterRegistry from './linter-registry'\nimport EditorsRegistry from './editor-registry'\nimport { Commands, showDebug } from './commands'\nimport ToggleView from './toggle-view'\nimport type { UI, Linter as LinterProvider, Indie } from './types'\n\nclass Linter {\n  private commands: Commands = new Commands()\n  private registryUI?: UIRegistry\n  private registryIndie?: IndieRegistry\n  private registryEditors?: EditorsRegistry\n  private registryLinters?: LinterRegistry\n  private registryMessages?: MessageRegistry\n  private subscriptions: CompositeDisposable = new CompositeDisposable()\n  private idleCallbacks: Set<number> = new Set()\n\n  constructor() {\n    this.subscriptions.add(this.commands)\n\n    this.commands.onShouldLint(() => {\n      this.registryEditorsInit()\n      const textEditor = atom.workspace.getActiveTextEditor()\n      if (textEditor === undefined) {\n        return\n      }\n      // this.registryEditors becomes valid inside registryEditorsInit\n      const editorLinter = this.registryEditors!.get(textEditor)\n      if (editorLinter) {\n        editorLinter.lint()\n      }\n    })\n    this.commands.onShouldToggleActiveEditor(() => {\n      const textEditor = atom.workspace.getActiveTextEditor()\n      if (textEditor === undefined) {\n        return\n      }\n      this.registryEditorsInit()\n      // this.registryEditors becomes valid inside registryEditorsInit\n      const editor = this.registryEditors!.get(textEditor)\n      if (editor) {\n        editor.dispose()\n      } else if (textEditor) {\n        // this.registryEditors becomes valid inside registryEditorsInit\n        this.registryEditors!.createFromTextEditor(textEditor)\n      }\n    })\n    this.commands.onShouldDebug(async () => {\n      this.registryUIInit()\n      this.registryIndieInit()\n      this.registryLintersInit()\n      await showDebug(\n        // this.registryLinters becomes valid inside registryLintersInit\n        this.registryLinters!.getProviders(),\n        // this.registryIndie becomes valid inside registryIndieInit\n        this.registryIndie!.getProviders(),\n        // this.registryUI becomes valid inside registryUIInit\n        this.registryUI!.getProviders(),\n      )\n    })\n    this.commands.onShouldToggleLinter(action => {\n      this.registryLintersInit()\n      // this.registryLinters becomes valid inside registryLintersInit\n      const toggleView = new ToggleView(action, arrayUnique(this.registryLinters!.getProviders().map(linter => linter.name)))\n      toggleView.onDidDispose(() => {\n        this.subscriptions.remove(toggleView)\n      })\n      toggleView.onDidDisable(name => {\n        // this.registryLinters becomes valid inside registryLintersInit\n        const linter = this.registryLinters!.getProviders().find(entry => entry.name === name)\n        if (linter) {\n          this.registryMessagesInit()\n          // this.registryMessages becomes valid inside registryMessagesInit\n          this.registryMessages!.deleteByLinter(linter)\n        }\n      })\n      toggleView.show()\n      this.subscriptions.add(toggleView)\n    })\n\n    const projectPathChangeCallbackID = window.requestIdleCallback(\n      /* projectPathChange */ () => {\n        this.idleCallbacks.delete(projectPathChangeCallbackID)\n        // NOTE: Atom triggers this on boot so wait a while\n        this.subscriptions.add(\n          atom.project.onDidChangePaths(() => {\n            this.commands.lint()\n          }),\n        )\n      },\n    )\n    this.idleCallbacks.add(projectPathChangeCallbackID)\n\n    const registryEditorsInitCallbackID = window.requestIdleCallback(\n      /* registryEditorsIdleInit */ () => {\n        this.idleCallbacks.delete(registryEditorsInitCallbackID)\n        // This will be called on the fly if needed, but needs to run on it's\n        // own at some point or linting on open or on change will never trigger\n        this.registryEditorsInit()\n      },\n    )\n    this.idleCallbacks.add(registryEditorsInitCallbackID)\n  }\n  dispose() {\n    this.idleCallbacks.forEach(callbackID => window.cancelIdleCallback(callbackID))\n    this.idleCallbacks.clear()\n    this.subscriptions.dispose()\n  }\n\n  registryEditorsInit() {\n    if (this.registryEditors !== undefined) {\n      return\n    }\n    this.registryEditors = new EditorsRegistry()\n    this.subscriptions.add(this.registryEditors)\n    this.registryEditors.observe(editorLinter => {\n      editorLinter.onShouldLint(onChange => {\n        this.registryLintersInit()\n        // this.registryLinters becomes valid inside registryLintersInit\n        this.registryLinters!.lint({ onChange, editor: editorLinter.getEditor() })\n      })\n      editorLinter.onDidDestroy(() => {\n        this.registryMessagesInit()\n        if (!this.registryEditors!.hasSibling(editorLinter)) {\n          // this.registryMessages becomes valid inside registryMessagesInit\n          this.registryMessages!.deleteByBuffer(editorLinter.getEditor().getBuffer())\n        }\n      })\n    })\n    this.registryEditors.activate()\n  }\n  registryLintersInit() {\n    if (this.registryLinters !== undefined) {\n      return\n    }\n    this.registryLinters = new LinterRegistry()\n    this.subscriptions.add(this.registryLinters)\n    this.registryLinters.onDidUpdateMessages(({ linter, messages, buffer }) => {\n      this.registryMessagesInit()\n      // this.registryMessages becomes valid inside registryMessagesInit\n      this.registryMessages!.set({ linter, messages, buffer })\n    })\n    this.registryLinters.onDidBeginLinting(({ linter, filePath }) => {\n      this.registryUIInit()\n      // this.registryUI becomes valid inside registryUIInit\n      this.registryUI!.didBeginLinting(linter, filePath)\n    })\n    this.registryLinters.onDidFinishLinting(({ linter, filePath }) => {\n      this.registryUIInit()\n      // this.registryUI becomes valid inside registryUIInit\n      this.registryUI!.didFinishLinting(linter, filePath)\n    })\n  }\n  registryIndieInit() {\n    if (this.registryIndie !== undefined) {\n      return\n    }\n    this.registryIndie = new IndieRegistry()\n    this.subscriptions.add(this.registryIndie)\n    this.registryIndie.observe(indieLinter => {\n      indieLinter.onDidDestroy(() => {\n        this.registryMessagesInit()\n        // this.registryMessages becomes valid inside registryMessagesInit\n        this.registryMessages!.deleteByLinter(indieLinter)\n      })\n    })\n    this.registryIndie.onDidUpdate(({ linter, messages }) => {\n      this.registryMessagesInit()\n      // this.registryMessages becomes valid inside registryMessagesInit\n      this.registryMessages!.set({ linter, messages, buffer: null })\n    })\n  }\n  registryMessagesInit() {\n    if (this.registryMessages) {\n      return\n    }\n    this.registryMessages = new MessageRegistry()\n    this.subscriptions.add(this.registryMessages)\n    this.registryMessages.onDidUpdateMessages(difference => {\n      this.registryUIInit()\n      // this.registryUI becomes valid inside registryUIInit\n      this.registryUI!.render(difference)\n    })\n  }\n  registryUIInit() {\n    if (this.registryUI !== undefined) {\n      return\n    }\n    this.registryUI = new UIRegistry()\n    this.subscriptions.add(this.registryUI)\n  }\n\n  // API methods for providing/consuming services\n  // UI\n  addUI(ui: UI) {\n    this.registryUIInit()\n    // this.registryUI becomes valid inside registryUIInit\n    this.registryUI!.add(ui)\n    this.registryMessagesInit()\n    // this.registryMessages becomes valid inside registryMessagesInit\n    const messages = this.registryMessages!.messages\n    if (messages.length) {\n      ui.render({ added: messages, messages, removed: [] })\n    }\n  }\n  deleteUI(ui: UI) {\n    this.registryUIInit()\n    // this.registryUI becomes valid inside registryUIInit\n    this.registryUI!.delete(ui)\n  }\n  // Standard Linter\n  addLinter(linter: LinterProvider) {\n    this.registryLintersInit()\n    // this.registryLinters becomes valid inside registryLintersInit\n    this.registryLinters!.addLinter(linter)\n  }\n  deleteLinter(linter: LinterProvider) {\n    this.registryLintersInit()\n    // this.registryLinters becomes valid inside registryLintersInit\n    this.registryLinters!.deleteLinter(linter)\n    this.registryMessagesInit()\n    // this.registryMessages becomes valid inside registryMessagesInit\n    this.registryMessages!.deleteByLinter(linter)\n  }\n  // Indie Linter\n  addIndie(indie: Indie) {\n    this.registryIndieInit()\n    // this.registryIndie becomes valid inside registryIndieInit\n    return this.registryIndie!.register(indie, 2)\n  }\n}\n\nexport default Linter\n"]}