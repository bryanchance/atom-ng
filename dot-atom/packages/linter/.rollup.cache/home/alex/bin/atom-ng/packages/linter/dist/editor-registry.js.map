{"version":3,"file":"editor-registry.js","sourceRoot":"","sources":["../lib/editor-registry.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,OAAO,EAAE,mBAAmB,EAAE,MAAM,MAAM,CAAA;AAEnD,OAAO,YAAY,MAAM,iBAAiB,CAAA;AAE1C,MAAM,CAAC,OAAO,OAAO,cAAc;IAMjC;QALQ,YAAO,GAAY,IAAI,OAAO,EAAE,CAAA;QAChC,eAAU,GAAY,IAAI,CAAA;QAC1B,kBAAa,GAAwB,IAAI,mBAAmB,EAAE,CAAA;QAC9D,kBAAa,GAAkC,IAAI,GAAG,EAAE,CAAA;QAG9D,IAAI,CAAC,aAAa,CAAC,GAAG,CACpB,IAAI,CAAC,OAAO,EACZ,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,mBAAmB,EAAE,UAAU,CAAC,EAAE;YACpD,IAAI,CAAC,UAAU,GAAG,UAAU,CAAA;QAC9B,CAAC,CAAC,CACH,CAAA;IACH,CAAC;IACD,QAAQ;QACN,IAAI,CAAC,aAAa,CAAC,GAAG,CACpB,IAAI,CAAC,SAAS,CAAC,kBAAkB,CAAC,UAAU,CAAC,EAAE;YAC7C,IAAI,CAAC,oBAAoB,CAAC,UAAU,CAAC,CAAA;QACvC,CAAC,CAAC,CACH,CAAA;IACH,CAAC;IACD,GAAG,CAAC,UAAsB;QACxB,OAAO,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,UAAU,CAAC,CAAA;IAC3C,CAAC;IACD,oBAAoB,CAAC,UAAsB;QACzC,IAAI,YAAY,GAAG,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,UAAU,CAAC,CAAA;QACrD,IAAI,YAAY,EAAE;YAChB,OAAO,YAAY,CAAA;SACpB;QACD,YAAY,GAAG,IAAI,YAAY,CAAC,UAAU,CAAC,CAAA;QAC3C,YAAY,CAAC,YAAY,CAAC,GAAG,EAAE;YAC7B,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,UAAU,CAAC,CAAA;QACvC,CAAC,CAAC,CAAA;QACF,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,UAAU,EAAE,YAAY,CAAC,CAAA;QAChD,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,EAAE,YAAY,CAAC,CAAA;QAC1C,IAAI,IAAI,CAAC,UAAU,EAAE;YACnB,YAAY,CAAC,IAAI,EAAE,CAAA;SACpB;QACD,OAAO,YAAY,CAAA;IACrB,CAAC;IACD,UAAU,CAAC,YAA0B;QACnC,MAAM,MAAM,GAAG,YAAY,CAAC,SAAS,EAAE,CAAC,SAAS,EAAE,CAAA;QAEnD,OAAO,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,IAAI,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,SAAS,EAAE,KAAK,MAAM,CAAC,CAAA;IACxF,CAAC;IACD,OAAO,CAAC,QAA8C;QACpD,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAA;QACpC,OAAO,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAA;IAC7C,CAAC;IACD,OAAO;QACL,KAAK,MAAM,KAAK,IAAI,IAAI,CAAC,aAAa,CAAC,MAAM,EAAE,EAAE;YAC/C,KAAK,CAAC,OAAO,EAAE,CAAA;SAChB;QACD,IAAI,CAAC,aAAa,CAAC,OAAO,EAAE,CAAA;IAC9B,CAAC;CACF","sourcesContent":["import { Emitter, CompositeDisposable } from 'atom'\nimport type { Disposable, TextEditor } from 'atom'\nimport EditorLinter from './editor-linter'\n\nexport default class EditorRegistry {\n  private emitter: Emitter = new Emitter()\n  private lintOnOpen: boolean = true\n  private subscriptions: CompositeDisposable = new CompositeDisposable()\n  private editorLinters: Map<TextEditor, EditorLinter> = new Map()\n\n  constructor() {\n    this.subscriptions.add(\n      this.emitter,\n      atom.config.observe('linter.lintOnOpen', lintOnOpen => {\n        this.lintOnOpen = lintOnOpen\n      }),\n    )\n  }\n  activate() {\n    this.subscriptions.add(\n      atom.workspace.observeTextEditors(textEditor => {\n        this.createFromTextEditor(textEditor)\n      }),\n    )\n  }\n  get(textEditor: TextEditor): EditorLinter | null | undefined {\n    return this.editorLinters.get(textEditor)\n  }\n  createFromTextEditor(textEditor: TextEditor): EditorLinter {\n    let editorLinter = this.editorLinters.get(textEditor)\n    if (editorLinter) {\n      return editorLinter\n    }\n    editorLinter = new EditorLinter(textEditor)\n    editorLinter.onDidDestroy(() => {\n      this.editorLinters.delete(textEditor)\n    })\n    this.editorLinters.set(textEditor, editorLinter)\n    this.emitter.emit('observe', editorLinter)\n    if (this.lintOnOpen) {\n      editorLinter.lint()\n    }\n    return editorLinter\n  }\n  hasSibling(editorLinter: EditorLinter): boolean {\n    const buffer = editorLinter.getEditor().getBuffer()\n\n    return Array.from(this.editorLinters.keys()).some(item => item.getBuffer() === buffer)\n  }\n  observe(callback: (editorLinter: EditorLinter) => void): Disposable {\n    this.editorLinters.forEach(callback)\n    return this.emitter.on('observe', callback)\n  }\n  dispose() {\n    for (const entry of this.editorLinters.values()) {\n      entry.dispose()\n    }\n    this.subscriptions.dispose()\n  }\n}\n"]}