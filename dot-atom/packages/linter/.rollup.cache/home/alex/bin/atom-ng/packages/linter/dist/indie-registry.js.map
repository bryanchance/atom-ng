{"version":3,"file":"indie-registry.js","sourceRoot":"","sources":["../lib/indie-registry.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,OAAO,EAAE,mBAAmB,EAAE,MAAM,MAAM,CAAA;AAGnD,OAAO,aAAa,MAAM,kBAAkB,CAAA;AAC5C,OAAO,EAAE,KAAK,IAAI,aAAa,EAAE,MAAM,YAAY,CAAA;AAGnD,MAAM,CAAC,OAAO,OAAO,aAAa;IAKhC;QAJQ,YAAO,GAAY,IAAI,OAAO,EAAE,CAAA;QAChC,cAAS,GAAuB,IAAI,GAAG,EAAE,CAAA;QACzC,kBAAa,GAAwB,IAAI,mBAAmB,EAAE,CAAA;QAGpE,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,CAAA;IACtC,CAAC;IAED,QAAQ,CAAC,MAAa,EAAE,OAAU;QAChC,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,EAAE;YAC1B,MAAM,IAAI,KAAK,CAAC,gCAAgC,CAAC,CAAA;SAClD;QACD,MAAM,WAAW,GAAG,IAAI,aAAa,CAAC,MAAM,EAAE,OAAO,CAAC,CAAA;QACtD,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,WAAW,CAAC,CAAA;QAC/B,WAAW,CAAC,YAAY,CAAC,GAAG,EAAE;YAC5B,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,WAAW,CAAC,CAAA;QACpC,CAAC,CAAC,CAAA;QACF,WAAW,CAAC,WAAW,CAAC,QAAQ,CAAC,EAAE;YACjC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,YAAY,EAAE,EAAE,MAAM,EAAE,WAAW,EAAE,QAAQ,EAAE,CAAC,CAAA;QACpE,CAAC,CAAC,CAAA;QACF,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,EAAE,WAAW,CAAC,CAAA;QAEzC,OAAO,WAAW,CAAA;IACpB,CAAC;IACD,YAAY;QACV,OAAO,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAA;IACnC,CAAC;IAGD,OAAO,CAAC,QAAsC;QAC5C,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAA;QAChC,OAAO,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAA;IAC7C,CAAC;IACD,WAAW,CAAC,QAAsC;QAChD,OAAO,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,YAAY,EAAE,QAAQ,CAAC,CAAA;IAChD,CAAC;IAGD,OAAO;QACL,KAAK,MAAM,KAAK,IAAI,IAAI,CAAC,SAAS,EAAE;YAClC,KAAK,CAAC,OAAO,EAAE,CAAA;SAChB;QACD,IAAI,CAAC,aAAa,CAAC,OAAO,EAAE,CAAA;IAC9B,CAAC;CACF","sourcesContent":["import { Emitter, CompositeDisposable } from 'atom'\nimport type { Disposable } from 'atom'\n\nimport IndieDelegate from './indie-delegate'\nimport { indie as validateIndie } from './validate'\nimport type { Indie } from './types'\n\nexport default class IndieRegistry {\n  private emitter: Emitter = new Emitter()\n  private delegates: Set<IndieDelegate> = new Set()\n  private subscriptions: CompositeDisposable = new CompositeDisposable()\n\n  constructor() {\n    this.subscriptions.add(this.emitter)\n  }\n  // Public method\n  register(config: Indie, version: 2): IndieDelegate {\n    if (!validateIndie(config)) {\n      throw new Error('Error registering Indie Linter')\n    }\n    const indieLinter = new IndieDelegate(config, version)\n    this.delegates.add(indieLinter)\n    indieLinter.onDidDestroy(() => {\n      this.delegates.delete(indieLinter)\n    })\n    indieLinter.onDidUpdate(messages => {\n      this.emitter.emit('did-update', { linter: indieLinter, messages })\n    })\n    this.emitter.emit('observe', indieLinter)\n\n    return indieLinter\n  }\n  getProviders(): Array<IndieDelegate> {\n    return Array.from(this.delegates)\n  }\n\n  /* eslint-disable @typescript-eslint/no-explicit-any */\n  observe(callback: (...args: Array<any>) => any): Disposable {\n    this.delegates.forEach(callback)\n    return this.emitter.on('observe', callback)\n  }\n  onDidUpdate(callback: (...args: Array<any>) => any): Disposable {\n    return this.emitter.on('did-update', callback)\n  }\n  /* eslint-enable @typescript-eslint/no-explicit-any */\n\n  dispose() {\n    for (const entry of this.delegates) {\n      entry.dispose()\n    }\n    this.subscriptions.dispose()\n  }\n}\n"]}