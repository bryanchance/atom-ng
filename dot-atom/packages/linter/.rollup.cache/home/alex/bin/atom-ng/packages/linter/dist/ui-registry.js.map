{"version":3,"file":"ui-registry.js","sourceRoot":"","sources":["../lib/ui-registry.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,mBAAmB,EAAE,MAAM,MAAM,CAAA;AAC1C,OAAO,EAAE,EAAE,IAAI,UAAU,EAAE,MAAM,YAAY,CAAA;AAG7C,MAAM,CAAC,OAAO,OAAO,UAAU;IAA/B;QACU,cAAS,GAAY,IAAI,GAAG,EAAE,CAAA;QAC9B,kBAAa,GAAwB,IAAI,mBAAmB,EAAE,CAAA;IAoCxE,CAAC;IAlCC,GAAG,CAAC,EAAM;QACR,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,UAAU,CAAC,EAAE,CAAC,EAAE;YAC7C,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,EAAE,CAAC,CAAA;YAC1B,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,EAAE,CAAC,CAAA;SACvB;IACH,CAAC;IACD,MAAM,CAAC,QAAY;QACjB,IAAI,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE;YAChC,QAAQ,CAAC,OAAO,EAAE,CAAA;YAClB,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAA;SAChC;IACH,CAAC;IACD,YAAY;QACV,OAAO,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAA;IACnC,CAAC;IACD,MAAM,CAAC,QAAuB;QAC5B,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,UAAU,QAAQ;YACvC,QAAQ,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAA;QAC3B,CAAC,CAAC,CAAA;IACJ,CAAC;IACD,eAAe,CAAC,MAAc,EAAE,QAAgB;QAC9C,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,UAAU,QAAQ;YACvC,QAAQ,CAAC,eAAe,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAA;QAC5C,CAAC,CAAC,CAAA;IACJ,CAAC;IACD,gBAAgB,CAAC,MAAc,EAAE,QAAgB;QAC/C,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,UAAU,QAAQ;YACvC,QAAQ,CAAC,gBAAgB,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAA;QAC7C,CAAC,CAAC,CAAA;IACJ,CAAC;IACD,OAAO;QACL,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,CAAA;QACtB,IAAI,CAAC,aAAa,CAAC,OAAO,EAAE,CAAA;IAC9B,CAAC;CACF","sourcesContent":["import { CompositeDisposable } from 'atom'\nimport { ui as validateUI } from './validate'\nimport type { Linter, UI, MessagesPatch } from './types'\n\nexport default class UIRegistry {\n  private providers: Set<UI> = new Set()\n  private subscriptions: CompositeDisposable = new CompositeDisposable()\n\n  add(ui: UI) {\n    if (!this.providers.has(ui) && validateUI(ui)) {\n      this.subscriptions.add(ui)\n      this.providers.add(ui)\n    }\n  }\n  delete(provider: UI) {\n    if (this.providers.has(provider)) {\n      provider.dispose()\n      this.providers.delete(provider)\n    }\n  }\n  getProviders(): Array<UI> {\n    return Array.from(this.providers)\n  }\n  render(messages: MessagesPatch) {\n    this.providers.forEach(function (provider) {\n      provider.render(messages)\n    })\n  }\n  didBeginLinting(linter: Linter, filePath: string) {\n    this.providers.forEach(function (provider) {\n      provider.didBeginLinting(linter, filePath)\n    })\n  }\n  didFinishLinting(linter: Linter, filePath: string) {\n    this.providers.forEach(function (provider) {\n      provider.didFinishLinting(linter, filePath)\n    })\n  }\n  dispose() {\n    this.providers.clear()\n    this.subscriptions.dispose()\n  }\n}\n"]}