{"version":3,"file":"index.js","sourceRoot":"","sources":["../lib/index.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,mBAAmB,EAAE,UAAU,EAAE,MAAM,MAAM,CAAA;AAEtD,OAAO,MAAM,MAAM,QAAQ,CAAA;AAI3B,IAAI,QAAgB,CAAA;AACpB,IAAI,aAAkC,CAAA;AAEtC,MAAM,UAAU,QAAQ;IACtB,aAAa,GAAG,IAAI,mBAAmB,EAAE,CAAA;IAEzC,QAAQ,GAAG,IAAI,MAAM,EAAE,CAAA;IACvB,aAAa,CAAC,GAAG,CACf,QAAQ,EACR,IAAI,CAAC,QAAQ,CAAC,4BAA4B,CAAC;QACzC,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,EAAE;YACtB,OAAO,CAAC,mBAAmB,CAAC,CAAC,OAAO,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAA;SACrD;IACH,CAAC,CAAC,CACH,CAAA;AACH,CAAC;AACD,MAAM,UAAU,aAAa,CAAC,MAA8C;IAC1E,MAAM,OAAO,GAAG,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAA;IAEzD,KAAK,MAAM,KAAK,IAAI,OAAO,EAAE;QAC3B,QAAQ,CAAC,SAAS,CAAC,KAAK,CAAC,CAAA;KAC1B;IACD,OAAO,IAAI,UAAU,CAAC,GAAG,EAAE;QACzB,KAAK,MAAM,KAAK,IAAI,OAAO,EAAE;YAC3B,QAAQ,CAAC,YAAY,CAAC,KAAK,CAAC,CAAA;SAC7B;IACH,CAAC,CAAC,CAAA;AACJ,CAAC;AACD,MAAM,UAAU,SAAS,CAAC,EAAkB;IAC1C,MAAM,GAAG,GAAG,KAAK,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAA;IAEzC,KAAK,MAAM,KAAK,IAAI,GAAG,EAAE;QACvB,QAAQ,CAAC,KAAK,CAAC,KAAK,CAAC,CAAA;KACtB;IACD,OAAO,IAAI,UAAU,CAAC,GAAG,EAAE;QACzB,KAAK,MAAM,KAAK,IAAI,GAAG,EAAE;YACvB,QAAQ,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAA;SACzB;IACH,CAAC,CAAC,CAAA;AACJ,CAAC;AACD,MAAM,UAAU,YAAY;IAC1B,OAAO,CAAC,KAAY,EAAE,EAAE,CAAC,QAAQ,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAA;AACnD,CAAC;AACD,MAAM,UAAU,UAAU;IACxB,aAAa,CAAC,OAAO,EAAE,CAAA;AACzB,CAAC","sourcesContent":["import { CompositeDisposable, Disposable } from 'atom'\n\nimport Linter from './main'\nimport type { UI, Linter as LinterProvider, Indie } from './types'\n\n// Internal variables\nlet instance: Linter\nlet subscriptions: CompositeDisposable\n\nexport function activate() {\n  subscriptions = new CompositeDisposable()\n\n  instance = new Linter()\n  subscriptions.add(\n    instance,\n    atom.packages.onDidActivateInitialPackages(function () {\n      if (!atom.inSpecMode()) {\n        require('atom-package-deps').install('linter', true)\n      }\n    }),\n  )\n}\nexport function consumeLinter(linter: LinterProvider | Array<LinterProvider>): Disposable {\n  const linters = Array.isArray(linter) ? linter : [linter]\n\n  for (const entry of linters) {\n    instance.addLinter(entry)\n  }\n  return new Disposable(() => {\n    for (const entry of linters) {\n      instance.deleteLinter(entry)\n    }\n  })\n}\nexport function consumeUI(ui: UI | Array<UI>): Disposable {\n  const uis = Array.isArray(ui) ? ui : [ui]\n\n  for (const entry of uis) {\n    instance.addUI(entry)\n  }\n  return new Disposable(() => {\n    for (const entry of uis) {\n      instance.deleteUI(entry)\n    }\n  })\n}\nexport function provideIndie() {\n  return (indie: Indie) => instance.addIndie(indie)\n}\nexport function deactivate() {\n  subscriptions.dispose()\n}\n"]}